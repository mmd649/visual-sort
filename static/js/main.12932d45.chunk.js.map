{"version":3,"sources":["SortingAlgorithms/Quick-Sort.js","SortingAlgorithms/Merge-Sort.js","Visualiser/Visualiser.jsx","SortingAlgorithms/Bubble-Sort.js","SortingAlgorithms/Insertion-Sort.js","App.js","serviceWorker.js","index.js"],"names":["sort","arr","low","high","animations","pivotIndex","pivot","i","j","push","temp","arrayPartition","MergeSort","array","startIndex","endIndex","midIndex","Math","floor","leftArrayLength","rightArrayLength","leftArray","rightArray","x","k","merge","Visualiser","props","state","this","resetArray","randomNumer","random","setState","length","y","getBubbleSortAnimation","bars","document","getElementsByClassName","firstBarIndex","secondBarIndex","fbStyle","style","sbStyle","colour","setTimeout","backgroundColor","fbNewHeight","sbNewHeight","height","getInsertionSortAnimation","firstBarStyle","secondBarStyle","barIndex","barStyle","getQuickSortAnimation","getMergeSortAnimation","className","map","value","index","key","onClick","bubbleSortAnimation","insertionSortAnimation","quickSortAnimation","mergeSortAnimation","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12932d45.chunk.js","sourcesContent":["export function getQuickSortAnimation(array){\r\n\r\n    let animations = [];\r\n\r\n    sort(array, 0, array.length - 1, animations);\r\n\r\n    return animations;\r\n}\r\n\r\nconst arrayPartition = (arr, low, high, animations) => {\r\n\r\n    let pivot = arr[high];\r\n    let i = low - 1;\r\n\r\n    for(let j = low; j < high; j++){\r\n\r\n        animations.push(['initialComparison', j, high]);\r\n        animations.push(['secondaryComparison', j, high]);\r\n\r\n        // If arr[j] is less than or equal to the value of pivot, increase the value of i by 1 \r\n        // and swap the values of arr[i] and arr[j] around.\r\n        if(arr[j] <= pivot){\r\n            i++;\r\n            const temp = arr[i];\r\n            arr[i] = arr[j];\r\n            animations.push(['swap', i, arr[j], j, temp]);\r\n            arr[j] = temp;\r\n        }\r\n    }\r\n    \r\n    //Once the position of the pivot has been found, swap the value of pivot to the value of arr[i + 1]\r\n    const temp = arr[i+1];\r\n    arr[i+1] = arr[high];\r\n    animations.push(['swap', i + 1, arr[high], high, temp]);\r\n    arr[high] = temp;\r\n\r\n    //return the correct index of the pivot.\r\n    return (i + 1); \r\n}\r\n\r\nconst sort = (arr, low, high, animations) => {\r\n\r\n    if(low < high){\r\n        \r\n        //Get the index of the pivot after being sorted\r\n        const pivotIndex = arrayPartition(arr, low, high, animations);\r\n\r\n        //Since the array has been sorted with the left partition being value lower or equal than the pivot value\r\n        //while the right side are values greater than the pivot\r\n\r\n        //Recursively call sort for the left side of the partition\r\n        sort(arr, low, pivotIndex - 1, animations);\r\n\r\n        //Recursively call sort for the right side of the partition\r\n        sort(arr, pivotIndex + 1, high, animations);\r\n    }\r\n\r\n}","export function getMergeSortAnimation(array){\r\n\r\n    let animations = [];\r\n\r\n    MergeSort(array, 0, array.length - 1, animations);\r\n\r\n    return animations;\r\n}\r\n\r\nconst merge = (array, startIndex, midIndex, endIndex, animations) => {\r\n\r\n    let leftArrayLength = midIndex - startIndex + 1;\r\n    let rightArrayLength = endIndex - midIndex;\r\n    \r\n    const leftArray = [], rightArray = [];\r\n\r\n    //Create a temporary array for the left partition\r\n    for(let x = 0; x < leftArrayLength; x++) {leftArray[x] = array[startIndex + x]};\r\n    //Create a temporary array for the right partition\r\n    for(let x = 0; x < rightArrayLength; x++) {rightArray[x] = array[midIndex + 1 + x]};\r\n\r\n    let i = 0, j = 0, k = startIndex;\r\n\r\n    //Loop through left and right arrays and compare the values in each array \r\n    while (i < leftArrayLength && j < rightArrayLength) {\r\n\r\n        animations.push(['initialComparison', k, (midIndex + 1 + j)]);\r\n        animations.push(['secondaryComparison', k, (midIndex + 1 + j)]);\r\n\r\n        if (leftArray[i] <= rightArray[j]){\r\n            animations.push(['swap', k, leftArray[i]]); \r\n            array[k++] = leftArray[i++];\r\n        } else {\r\n            animations.push(['swap', k, rightArray[j]]);\r\n            array[k++] = rightArray[j++];\r\n        } \r\n    } \r\n\r\n    //Copy the remaining elements in the array\r\n    while (i < leftArrayLength) { \r\n        animations.push(['swap', k, leftArray[i]]);\r\n        array[k++] = leftArray[i++];\r\n    } \r\n    \r\n    //Copy the remaining elements in the array\r\n    while (j < rightArrayLength) {\r\n        animations.push(['swap', k, rightArray[j]]); \r\n        array[k++] = rightArray[j++];\r\n    } \r\n\r\n}\r\n\r\n//\r\nconst MergeSort = (array, startIndex, endIndex, animations) => {\r\n\r\n    if(startIndex === endIndex) return;\r\n\r\n    const midIndex = Math.floor((startIndex + endIndex) / 2);\r\n\r\n    //Start a recursion call for the left partition of the original array\r\n    MergeSort(array, startIndex, midIndex, animations);\r\n\r\n    //Start a recursion call for the right partition of the original array\r\n    MergeSort(array, midIndex + 1, endIndex, animations);\r\n\r\n    //Merge the arrays to form a single sorted array\r\n    merge(array, startIndex, midIndex, endIndex, animations);\r\n    \r\n}","import React from \"react\";\r\nimport \"./Visualiser.css\";\r\nimport { getBubbleSortAnimation } from \"../SortingAlgorithms/Bubble-Sort\";\r\nimport { getInsertionSortAnimation } from \"../SortingAlgorithms/Insertion-Sort\";\r\nimport { getQuickSortAnimation } from \"../SortingAlgorithms/Quick-Sort\";\r\nimport { getMergeSortAnimation } from \"../SortingAlgorithms/Merge-Sort\";\r\n\r\n//Bar Generation Settings\r\nconst minGeneratedValue = 10;\r\nconst maxGeneratedValue = 800;\r\nconst arrayLength = 140;\r\n\r\n//Animation Settings\r\nconst PRIMARY_COLOUR = \"darkorange\";\r\nconst SECONDARY_COLOUR = \"deepskyblue\";\r\nconst ANIMATION_SPEED = 10;\r\n\r\nexport default class Visualiser extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let x = 0; x < arrayLength; x++) {\r\n      const randomNumer =\r\n        Math.floor(\r\n          Math.random() * (maxGeneratedValue - minGeneratedValue + 1)\r\n        ) + minGeneratedValue;\r\n      array.push(randomNumer);\r\n    }\r\n    this.setState({array});\r\n  }\r\n\r\n  /*\r\n    ====================================\r\n    Bubble Sort\r\n    ====================================\r\n   */\r\n  bubbleSortAnimation() {\r\n    const animations = getBubbleSortAnimation(this.state.array);\r\n    const bars = document.getElementsByClassName(\"bar\");\r\n\r\n    for (let x = 0; x < animations.length; x++) {\r\n\r\n      const colorChange = x % 3 !== 2;\r\n\r\n      if(colorChange){\r\n\r\n        const [firstBarIndex, secondBarIndex] = animations[x];\r\n        const fbStyle = bars[firstBarIndex].style;\r\n        const sbStyle = bars[secondBarIndex].style;\r\n        \r\n        const colour = x % 3 === 0 ? SECONDARY_COLOUR : PRIMARY_COLOUR;\r\n\r\n        setTimeout(() => {\r\n          fbStyle.backgroundColor = colour;\r\n          sbStyle.backgroundColor = colour;\r\n        }, x * ANIMATION_SPEED);\r\n\r\n      } else {\r\n\r\n        const [firstBarIndex, secondBarIndex] = animations[x - 1];\r\n        const [fbNewHeight, sbNewHeight] = animations[x];\r\n        const fbStyle = bars[firstBarIndex].style;\r\n        const sbStyle = bars[secondBarIndex].style;\r\n\r\n        setTimeout(() => {\r\n          fbStyle.height = `${fbNewHeight}px`;\r\n          sbStyle.height = `${sbNewHeight}px`;\r\n        }, x * ANIMATION_SPEED);\r\n      }\r\n    }\r\n  }\r\n\r\n  /* \r\n    ======================================\r\n    Insertion Sort\r\n    ======================================\r\n  */\r\n\r\n  insertionSortAnimation(){\r\n\r\n    const animations = getInsertionSortAnimation(this.state.array);\r\n    const bars = document.getElementsByClassName(\"bar\");\r\n\r\n    for(let x = 0; x < animations.length; x++){\r\n\r\n      if(animations[x][0] === 'initialComparison' || animations[x][0] === 'secondaryComparison'){\r\n\r\n        const colour = animations[x][0] === 'initialComparison' ? SECONDARY_COLOUR : PRIMARY_COLOUR;\r\n        const firstBarIndex = animations[x][1];\r\n        const secondBarIndex = animations[x][2];\r\n\r\n        const firstBarStyle = bars[firstBarIndex].style;\r\n        const secondBarStyle = bars[secondBarIndex].style;\r\n\r\n        setTimeout(() =>{\r\n\r\n          firstBarStyle.backgroundColor = colour;\r\n          secondBarStyle.backgroundColor = colour;\r\n\r\n        }, x * ANIMATION_SPEED);\r\n\r\n      } else if(animations[x][0] === 'swap') {\r\n        \r\n        const barIndex = animations[x][1];\r\n        const barStyle = bars[barIndex].style;\r\n\r\n        setTimeout(() =>{\r\n          \r\n          barStyle.height = `${animations[x][2]}px`;\r\n\r\n        }, x * ANIMATION_SPEED);\r\n      }\r\n    }\r\n  }\r\n\r\n  /* \r\n    ======================================\r\n    Quick Sort\r\n    ======================================\r\n  */\r\n\r\n  quickSortAnimation(){\r\n\r\n    const animations = getQuickSortAnimation(this.state.array);\r\n    const bars = document.getElementsByClassName(\"bar\");\r\n    \r\n    for(let x = 0; x < animations.length; x++){\r\n\r\n      if(animations[x][0] === 'initialComparison' || animations[x][0] === 'secondaryComparison'){\r\n        \r\n        const colour = animations[x][0] === 'initialComparison' ? SECONDARY_COLOUR : PRIMARY_COLOUR;\r\n        const firstBarIndex = animations[x][1];\r\n        const secondBarIndex = animations[x][2];\r\n        const firstBarStyle = bars[firstBarIndex].style;\r\n        const secondBarStyle = bars[secondBarIndex].style;\r\n\r\n        setTimeout(() => {\r\n\r\n          firstBarStyle.backgroundColor = colour;\r\n          secondBarStyle.backgroundColor = colour;\r\n\r\n        }, x * ANIMATION_SPEED);\r\n\r\n      } else if(animations[x][0] === 'swap'){\r\n\r\n        const firstBarIndex = animations[x][1];\r\n        const secondBarIndex = animations[x][3];\r\n        const firstBarStyle = bars[firstBarIndex].style;\r\n        const secondBarStyle = bars[secondBarIndex].style;\r\n\r\n        setTimeout(() =>{\r\n\r\n          firstBarStyle.height = `${animations[x][2]}px`;\r\n          secondBarStyle.height = `${animations[x][4]}px`;\r\n\r\n        }, x * ANIMATION_SPEED);\r\n      }\r\n    }\r\n  }\r\n\r\n   /* \r\n    ======================================\r\n    Merge Sort\r\n    ======================================\r\n  */\r\n\r\n  mergeSortAnimation(){\r\n\r\n    const animations = getMergeSortAnimation(this.state.array);\r\n    const bars = document.getElementsByClassName('bar');\r\n\r\n    for(let x = 0; x < animations.length; x++){\r\n\r\n      if(animations[x][0] === 'initialComparison' || animations[x][0] === 'secondaryComparison'){\r\n\r\n        const colour = animations[x][0] === 'initialComparison' ? SECONDARY_COLOUR : PRIMARY_COLOUR;\r\n        const firstBarIndex = animations[x][1];\r\n        const secondBarIndex = animations[x][2];\r\n        const firstBarStyle = bars[firstBarIndex].style;\r\n        const secondBarStyle = bars[secondBarIndex].style;\r\n\r\n        setTimeout(() => {\r\n\r\n          firstBarStyle.backgroundColor = colour;\r\n          secondBarStyle.backgroundColor = colour;\r\n\r\n        }, x * ANIMATION_SPEED);\r\n\r\n      } else if(animations[x][0] === 'swap'){\r\n\r\n        const barIndex = animations[x][1];\r\n        const barStyle = bars[barIndex].style;\r\n\r\n        setTimeout(() => {\r\n\r\n          barStyle.height = `${animations[x][2]}px`;\r\n\r\n        }, x * ANIMATION_SPEED);\r\n\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n    return (\r\n      <div className=\"main-container\">\r\n        <div className=\"bar-container\">\r\n          {array.map((value, index) => (\r\n            <div\r\n              className=\"bar\"\r\n              key={index}\r\n              style={{ height: `${value}px` }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n        <div className=\"btn-container\">\r\n          <div className=\"btn\" onClick={() => this.resetArray()}>Generate New Array</div>\r\n          <div className=\"btn\" onClick={() => this.bubbleSortAnimation()}>Bubble Sort</div>\r\n          <div className=\"btn\" onClick={() => this.insertionSortAnimation()}>Insertion Sort</div>\r\n          <div className=\"btn\" onClick={() => this.quickSortAnimation()}>Quick Sort</div>\r\n          <div className=\"btn\" onClick={() => this.mergeSortAnimation()}>Merge Sort</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export function getBubbleSortAnimation (array){\r\n\r\n    let animations = [];\r\n\r\n    for(let x = 0; x < array.length; x++){\r\n        \r\n        for(let y = 0; y < array.length - (x + 1); y++){\r\n            \r\n            //Change colour (Comparison)\r\n            animations.push([y, y+1]);\r\n\r\n            //Change back to default colour\r\n            animations.push([y, y+1]);\r\n\r\n            if(array[y] > array[y+1]){\r\n                \r\n                animations.push([array[y+1], array[y]]);\r\n\r\n                const temp = array[y+1];\r\n                array[y+1] = array[y];\r\n                array[y] = temp;\r\n\r\n                //Swap animation\r\n                \r\n            } else {\r\n                animations.push([array[y], array[y + 1]]);\r\n            }\r\n\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n\r\n","export function getInsertionSortAnimation(array){\r\n    \r\n    let animations = []\r\n\r\n    for(let x = 1; x < array.length; x++){\r\n\r\n        let y = x - 1;\r\n        let temp = array[x];\r\n\r\n        //Initial comparison animation\r\n        animations.push(['initialComparison', y, x]);\r\n        animations.push(['secondaryComparison', y, x]);\r\n\r\n        while(y >= 0 && array[y] > temp){\r\n\r\n            //If the current second pointer (array[y] in this case) is greater than primary pointer (array[x])\r\n            //Push a swap animation\r\n            animations.push(['swap', y + 1, array[y]]);\r\n\r\n            array[y + 1] = array[y]\r\n            y--;\r\n\r\n            //If the current second pointer is greater than first pointer, add comparison animations.\r\n            if(array[y] > temp){\r\n                animations.push(['initialComparison', y, x]);\r\n                animations.push(['secondaryComparison', y, x]);\r\n            }\r\n\r\n        }\r\n        array[y+1] = temp;\r\n        animations.push(['swap', y + 1, temp]);\r\n    }\r\n    return animations;\r\n}\r\n","import React from 'react';\nimport Visualiser from './Visualiser/Visualiser'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualiser />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}